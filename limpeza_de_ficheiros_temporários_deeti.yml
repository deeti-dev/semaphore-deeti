---
- name: Limpar arquivos temporários no %temp% de todos os usuários e obter o tamanho
  hosts: deeti
  gather_facts: yes
  ignore_unreachable: yes
  tasks:
    - name: Verificar permissões do usuário inacom\ansible
      win_shell: whoami
      become: yes
      become_user: inacom\ansible
      register: user_check
      ignore_errors: yes
      timeout: 30

    - name: Logar permissões do usuário
      debug:
        msg: "Usuário inacom\\ansible: {{ user_check.stdout | default('Não identificado') }}"
      when: user_check is defined and user_check.stdout is defined

    - name: Obter lista de diretórios de usuários em C:\Users
      win_shell: |
        $excludedUsers = @('All Users', 'Default', 'Default User', 'KINagSvc', 'Public')
        try {
          $userDirs = Get-ChildItem -Path 'C:\Users' -Directory -ErrorAction Stop | Where-Object { $excludedUsers -notcontains $_.Name } | Select-Object -ExpandProperty FullName
          if ($userDirs) { $userDirs -join ',' } else { Write-Output "Erro: Nenhum diretório de usuário encontrado" }
        } catch {
          Write-Output "Erro ao listar diretórios: $($_.Exception.Message)"
        }
      register: user_directories
      become: yes
      become_user: inacom\ansible
      ignore_errors: yes
      timeout: 30

    - name: Debugar saída bruta de diretórios
      debug:
        msg: "Saída bruta de user_directories.stdout: {{ user_directories.stdout | default('Nenhuma saída') }}"
      when: user_directories is defined

    - name: Debugar lista de diretórios de usuários
      debug:
        msg: "Diretórios de usuários encontrados: {{ user_directories.stdout | replace('\r\n', '') }}"
      when:
        - user_directories.rc == 0
        - user_directories.stdout is defined
        - user_directories.stdout != ""
        - user_directories.stdout != "Erro: Nenhum diretório de usuário encontrado"
        - not (user_directories.stdout | default('') | regex_search('^Erro ao listar diretórios:'))

    - name: Calcular tamanho e limpar pastas %temp%
      win_shell: |
        $userDirs = "{{ user_directories.stdout | replace('\r\n', '') }}".Split(',', [StringSplitOptions]::RemoveEmptyEntries)
        $totalSizeBefore = 0
        $totalSizeAfter = 0
        $cleanupResults = @()
        $remainingFiles = @()
        foreach ($dir in $userDirs) {
          $tempDir = Join-Path -Path $dir.Trim() -ChildPath 'AppData\Local\Temp'
          if (Test-Path $tempDir) {
            # Calcular tamanho antes
            $sizeBefore = (Get-ChildItem -Path $tempDir -File -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum -ErrorAction SilentlyContinue).Sum
            if ($sizeBefore -ne $null) { $totalSizeBefore += $sizeBefore }
            # Tentar limpeza (primeira passagem)
            try {
              Get-ChildItem -Path $tempDir -File -Recurse -ErrorAction Stop | ForEach-Object {
                try {
                  Remove-Item -Path $_.FullName -Force -ErrorAction Stop
                } catch {
                  $cleanupResults += "Erro ao excluir $($_.FullName): $($_.Exception.Message)"
                }
              }
              $cleanupResults += "Limpeza bem-sucedida em $tempDir"
            } catch {
              $cleanupResults += "Erro ao limpar $tempDir: $($_.Exception.Message)"
            }
            # Tentar limpeza novamente após 1 segundo (segunda passagem)
            Start-Sleep -Milliseconds 1000
            try {
              Get-ChildItem -Path $tempDir -File -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
                try {
                  Remove-Item -Path $_.FullName -Force -ErrorAction SilentlyContinue
                } catch {
                  # Erros na segunda passagem são ignorados para evitar duplicação
                }
              }
            } catch {
              # Ignorar erros na segunda passagem
            }
            # Calcular tamanho depois
            $sizeAfter = (Get-ChildItem -Path $tempDir -File -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum -ErrorAction SilentlyContinue).Sum
            if ($sizeAfter -ne $null) { $totalSizeAfter += $sizeAfter }
            # Listar arquivos remanescentes
            $files = Get-ChildItem -Path $tempDir -File -Recurse -ErrorAction SilentlyContinue
            if ($files) {
              $fileCount = $files.Count
              $remainingFiles += "$tempDir: $fileCount arquivos remanescentes"
            } else {
              $remainingFiles += "Nenhum arquivo remanescente em $tempDir"
            }
          } else {
            $cleanupResults += "Pasta não encontrada: $tempDir"
          }
        }
        $output = @{
          SizeBeforeGB = if ($totalSizeBefore -eq 0) { "0" } else { [math]::Round($totalSizeBefore / 1GB, 2) }
          SizeAfterGB = if ($totalSizeAfter -eq 0) { "0" } else { [math]::Round($totalSizeAfter / 1GB, 2) }
          CleanupResults = $cleanupResults -join ';'
          RemainingFiles = $remainingFiles -join ';'
        }
        ConvertTo-Json $output
      register: temp_operation
      become: yes
      become_user: inacom\ansible
      ignore_errors: yes
      timeout: 300
      when:
        - user_directories.rc == 0
        - user_directories.stdout is defined
        - user_directories.stdout != ""
        - user_directories.stdout != "Erro: Nenhum diretório de usuário encontrado"
        - not (user_directories.stdout | default('') | regex_search('^Erro ao listar diretórios:'))

    - name: Exibir tamanho antes da limpeza
      debug:
        msg: "Tamanho total das pastas %temp% antes: {{ (temp_operation.stdout | from_json).SizeBeforeGB }} GB"
      when: temp_operation.rc == 0 and temp_operation.stdout is defined

    - name: Exibir resultados da limpeza
      debug:
        msg: "Resultados da limpeza: {{ (temp_operation.stdout | from_json).CleanupResults }}"
      when: temp_operation.rc == 0 and temp_operation.stdout is defined

    - name: Exibir arquivos remanescentes
      debug:
        msg: "Arquivos remanescentes: {{ (temp_operation.stdout | from_json).RemainingFiles }}"
      when: temp_operation.rc == 0 and temp_operation.stdout is defined

    - name: Exibir tamanho após a limpeza
      debug:
        msg: "Tamanho total das pastas %temp% depois: {{ (temp_operation.stdout | from_json).SizeAfterGB }} GB"
      when: temp_operation.rc == 0 and temp_operation.stdout is defined

    - name: Informar resultado final da limpeza
      debug:
        msg: "Limpeza das pastas %temp% concluída. Tamanho antes: {{ (temp_operation.stdout | from_json).SizeBeforeGB }} GB, Tamanho depois: {{ (temp_operation.stdout | from_json).SizeAfterGB }} GB, Economia de espaço: {{ ((temp_operation.stdout | from_json).SizeBeforeGB | float) - ((temp_operation.stdout | from_json).SizeAfterGB | float) }} GB"
      when: temp_operation.rc == 0 and temp_operation.stdout is defined

    - name: Resumir erros de limpeza
      debug:
        msg: "Erros encontrados durante a limpeza: {{ ((temp_operation.stdout | from_json).CleanupResults | split(';') | select | where { $_ | regex_search('Erro') }) | join(';') | default('Nenhum erro') }}"
      when: temp_operation.rc == 0 and temp_operation.stdout is defined and (temp_operation.stdout | from_json).CleanupResults | regex_search('Erro')
