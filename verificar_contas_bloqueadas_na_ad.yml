---
- name: Listar todas as contas bloqueadas no domínio
  hosts: domain_controllers
  gather_facts: no
  vars:
    log_path: "/tmp/domain_locked_accounts.log"
    days_back: 7
    user_ou: "OU=Utilizadores no Domínio,OU=INACOM,DC=inacom,DC=local"
  tasks:
    - name: Verificar conectividade na porta WinRM
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: 5985
        state: started
        timeout: 60
        connect_timeout: 60
      register: winrm_connect
      ignore_errors: true
      ignore_unreachable: true
      delegate_to: localhost

    - name: Logar erro de conectividade
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Erro de conectividade - {{ winrm_connect.msg | default('Falha ao conectar') }}"
        create: true
      delegate_to: localhost
      when: winrm_connect.failed | default(false)

    - name: Verificar disponibilidade do módulo ActiveDirectory
      win_shell: |
        try {
          Import-Module ActiveDirectory -ErrorAction Stop
          Write-Output '{"module": "ActiveDirectory", "status": "available"}'
        } catch {
          Write-Output '{"module": "ActiveDirectory", "status": "unavailable", "message": "Erro ao carregar módulo: $($_ | Out-String)"}'
        }
      register: ad_module_check
      ignore_errors: true
      when: not winrm_connect.failed | default(false)

    - name: Logar status do módulo ActiveDirectory
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Status do módulo ActiveDirectory={{ ad_module_check.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: ad_module_check.stdout is defined

    - name: Validar OU
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $ou = Get-ADOrganizationalUnit -Filter "DistinguishedName -eq '{{ user_ou }}'" -ErrorAction Stop
          Write-Output '{"ou": "{{ user_ou }}", "status": "valid"}'
        } catch {
          Write-Output '{"ou": "{{ user_ou }}", "status": "invalid", "message": "Erro ao validar OU: $($_ | Out-String)"}'
        }
      register: ou_check
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - ad_module_check.stdout is defined
        - ad_module_check.stdout | regex_search('status\": \"available')

    - name: Logar status da OU
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Status da OU={{ ou_check.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: ou_check.stdout is defined

    - name: Verificar permissões na OU
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $acl = Get-Acl -Path "AD:{{ user_ou }}"
          $user = "{{ ansible_user }}"
          $access = $acl.Access | Where-Object { $_.IdentityReference -eq $user -and $_.ActiveDirectoryRights -match "ReadProperty" }
          if ($access) {
            Write-Output '{"permissions": "granted", "user": "{{ ansible_user }}", "ou": "{{ user_ou }}"}'
          } else {
            Write-Output '{"permissions": "denied", "user": "{{ ansible_user }}", "ou": "{{ user_ou }}", "message": "Usuário não tem permissão ReadProperty"}'
          }
        } catch {
          Write-Output '{"permissions": "error", "user": "{{ ansible_user }}", "ou": "{{ user_ou }}", "message": "Erro ao verificar permissões: $($_ | Out-String)"}'
        }
      register: permission_check
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - ad_module_check.stdout is defined
        - ad_module_check.stdout | regex_search('status\": \"available')
        - ou_check.stdout is defined
        - ou_check.stdout | regex_search('status\": \"valid')

    - name: Logar status das permissões
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Status das permissões={{ permission_check.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: permission_check.stdout is defined

    - name: Listar contas bloqueadas
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $lockedUsers = Get-ADUser -Filter "LockedOut -eq '$true'" -SearchBase "{{ user_ou }}" -Properties LockoutTime,SamAccountName -ErrorAction Stop |
            Select-Object Name,SamAccountName,@{Name='LockoutTime';Expression={if ($_.LockoutTime) { [DateTime]::FromFileTime($_.LockoutTime) } else { 'Desconhecido' }}},DistinguishedName
          if ($lockedUsers) {
            $lockedUsers | ConvertTo-Json -Depth 3
          } else {
            Write-Output '{"locked_users": [], "message": "Nenhuma conta bloqueada encontrada"}'
          }
        } catch {
          Write-Output '{"locked_users": [], "message": "Erro ao listar contas bloqueadas: $($_ | Out-String)"}'
        }
      register: locked_accounts
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - ad_module_check.stdout is defined
        - ad_module_check.stdout | regex_search('status\": \"available')
        - ou_check.stdout is defined
        - ou_check.stdout | regex_search('status\": \"valid')
        - permission_check.stdout is defined
        - permission_check.stdout | regex_search('permissions\": \"granted')

    - name: Exibir contas bloqueadas
      debug:
        msg: "{{ locked_accounts.stdout }}"
      when: locked_accounts.stdout is defined and locked_accounts.stdout | length > 0

    - name: Registrar contas bloqueadas
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Contas bloqueadas={{ locked_accounts.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: locked_accounts.stdout is defined

    - name: Coletar eventos de logon malsucedidos (eventID 4625) para contas bloqueadas
      win_shell: |
        try {
          $lockedJson = '{{ locked_accounts.stdout | default('{"locked_users": [], "message": "Nenhuma conta bloqueada"}') }}'
          $lockedUsers = ($lockedJson | ConvertFrom-Json).locked_users
          if ($lockedUsers) {
            $userNames = $lockedUsers | ForEach-Object { $_.SamAccountName }
            $startTime = (Get-Date).AddDays(-{{ days_back }})
            $endTime = Get-Date
            $events = Get-WinEvent -FilterHashtable @{
              LogName = 'Security'
              ID = 4625
              StartTime = $startTime
              EndTime = $endTime
            } -ErrorAction SilentlyContinue | Where-Object {
              $_.Properties[5].Value -in $userNames
            }
            if ($events) {
              $events | Select-Object TimeCreated, @{
                Name='AccountName'; Expression={$_.Properties[5].Value}
              }, @{
                Name='FailureReason'; Expression={$_.Properties[19].Value}
              }, @{
                Name='SourceIPAddress'; Expression={$_.Properties[18].Value}
              }, @{
                Name='ProcessName'; Expression={$_.Properties[14].Value}
              }, @{
                Name='WorkstationName'; Expression={$_.Properties[10].Value}
              } | ConvertTo-Json -Depth 3
            } else {
              Write-Output '{"events": [], "message": "Nenhum evento 4625 encontrado para contas bloqueadas"}'
            }
          } else {
            Write-Output '{"events": [], "message": "Nenhuma conta bloqueada para verificar eventos"}'
          }
        } catch {
          Write-Output '{"events": [], "message": "Erro ao coletar eventos: $($_ | Out-String)"}'
        }
      register: logon_failures
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - locked_accounts.stdout is defined
        - locked_accounts.stdout | regex_search('locked_users\": \[{')

    - name: Exibir eventos de logon malsucedidos
      debug:
        msg: "{{ logon_failures.stdout }}"
      when: logon_failures.stdout is defined and logon_failures.stdout | length > 0

    - name: Registrar eventos de logon malsucedidos
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Logon malsucedidos={{ logon_failures.stdout | default('Nenhum evento') }}"
        create: true
      delegate_to: localhost
      when: logon_failures.stdout is defined

    - name: Resumo da verificação
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Resumo - Contas bloqueadas={{ locked_accounts.stdout | default('Nenhum') }}, Logon malsucedidos={{ logon_failures.stdout | default('Nenhum') }}"
        create: true
      delegate_to: localhost
