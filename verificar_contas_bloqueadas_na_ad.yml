---
- name: Listar todas as contas bloqueadas no domínio
  hosts: domain_controllers
  gather_facts: no
  vars:
    log_path: "/tmp/domain_locked_accounts.log"
    days_back: 7
    user_ou: "OU=Utilizadores no Domínio,OU=INACOM,DC=inacom,DC=local"
    max_accounts: 100
  tasks:
    - name: Verificar conectividade na porta WinRM
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: 5985
        state: started
        timeout: 60
        connect_timeout: 60
      register: winrm_connect
      ignore_errors: true
      ignore_unreachable: true
      delegate_to: localhost

    - name: Logar erro de conectividade
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Erro de conectividade - {{ winrm_connect.msg | default('Falha ao conectar') }}"
        create: true
      delegate_to: localhost
      when: winrm_connect.failed | default(false)

    - name: Verificar autenticação WinRM
      win_shell: |
        whoami
      register: auth_check
      ignore_errors: true
      ignore_unreachable: true
      when: not winrm_connect.failed | default(false)

    - name: Logar erro de autenticação
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Erro de autenticação - {{ auth_check.msg | default('Credenciais rejeitadas') }}"
        create: true
      delegate_to: localhost
      when: auth_check.unreachable | default(false)

    - name: Verificar estado da conta Ansible no AD
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $user = Get-ADUser -Identity "ansible" -Properties LockedOut,Enabled,PasswordExpired -ErrorAction Stop
          Write-Output ($user | Select-Object SamAccountName,LockedOut,Enabled,PasswordExpired | ConvertTo-Json)
        } catch {
          Write-Output '{"SamAccountName": "ansible", "LockedOut": "unknown", "Enabled": "unknown", "PasswordExpired": "unknown", "message": "Erro ao verificar conta: $($_.Exception.Message)"}'
        }
      register: ansible_account_check
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)

    - name: Logar estado da conta Ansible
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Estado da conta Ansible={{ ansible_account_check.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: ansible_account_check.stdout is defined

    - name: Verificar política de bloqueio de contas
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $policy = Get-ADDefaultDomainPasswordPolicy -ErrorAction Stop
          Write-Output ($policy | Select-Object LockoutThreshold,LockoutDuration,LockoutObservationWindow | ConvertTo-Json)
        } catch {
          Write-Output '{"LockoutThreshold": "unknown", "LockoutDuration": "unknown", "LockoutObservationWindow": "unknown", "message": "Erro ao verificar política: $($_.Exception.Message)"}'
        }
      register: lockout_policy
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)

    - name: Logar política de bloqueio
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Política de bloqueio={{ lockout_policy.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: lockout_policy.stdout is defined

    - name: Coletar informações de depuração
      win_shell: |
        try {
          $psVersion = $PSVersionTable.PSVersion | ConvertTo-Json
          $dcInfo = Get-ADDomainController | Select-Object Name, OperatingSystem, Site | ConvertTo-Json
          Write-Output '{"debug": {"powershell_version": ' + $psVersion + ', "dc_info": ' + $dcInfo + '}}'
        } catch {
          Write-Output '{"debug": {"powershell_version": "unknown", "dc_info": "unknown", "message": "Erro ao coletar informações de depuração: $($_.Exception.Message)"}}'
        }
      register: debug_info
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)

    - name: Logar informações de depuração
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Debug={{ debug_info.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: debug_info.stdout is defined

    - name: Verificar disponibilidade do módulo ActiveDirectory
      win_shell: |
        try {
          Import-Module ActiveDirectory -ErrorAction Stop
          Write-Output '{"module": "ActiveDirectory", "status": "available"}'
        } catch {
          Write-Output '{"module": "ActiveDirectory", "status": "unavailable", "message": "Erro ao carregar módulo: $($_.Exception.Message)"}'
        }
      register: ad_module_check
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)

    - name: Logar status do módulo ActiveDirectory
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Status do módulo ActiveDirectory={{ ad_module_check.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: ad_module_check.stdout is defined

    - name: Validar OU
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $ou = Get-ADOrganizationalUnit -Filter "DistinguishedName -eq '{{ user_ou }}'" -ErrorAction Stop
          Write-Output '{"ou": "{{ user_ou }}", "status": "valid"}'
        } catch {
          Write-Output '{"ou": "{{ user_ou }}", "status": "invalid", "message": "Erro ao validar OU: $($_.Exception.Message)"}'
        }
      register: ou_check
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)
        - ad_module_check.stdout is defined
        - ad_module_check.stdout | regex_search('status\": \"available')

    - name: Logar status da OU
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Status da OU={{ ou_check.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: ou_check.stdout is defined

    - name: Verificar permissões na OU
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $acl = Get-Acl -Path "AD:{{ user_ou }}"
          $user = "{{ ansible_user }}"
          $access = $acl.Access | Where-Object { $_.IdentityReference -eq $user -and $_.ActiveDirectoryRights -match "ReadProperty" }
          if ($access) {
            Write-Output '{"permissions": "granted", "user": "{{ ansible_user }}", "ou": "{{ user_ou }}"}'
          } else {
            Write-Output '{"permissions": "denied", "user": "{{ ansible_user }}", "ou": "{{ user_ou }}", "message": "Usuário não tem permissão ReadProperty"}'
          }
        } catch {
          Write-Output '{"permissions": "error", "user": "{{ ansible_user }}", "ou": "{{ user_ou }}", "message": "Erro ao verificar permissões: $($_.Exception.Message)"}'
        }
      register: permission_check
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)
        - ad_module_check.stdout is defined
        - ad_module_check.stdout | regex_search('status\": \"available')
        - ou_check.stdout is defined
        - ou_check.stdout | regex_search('status\": \"valid')

    - name: Logar status das permissões
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Status das permissões={{ permission_check.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: permission_check.stdout is defined

    - name: Verificar permissão para atributo LockedOut
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $schema = Get-ADObject -Filter { name -eq 'user' } -SearchBase (Get-ADRootDSE).schemaNamingContext
          $acl = Get-Acl -Path "AD:{{ user_ou }}"
          $user = "{{ ansible_user }}"
          $access = $acl.Access | Where-Object {
            $_.IdentityReference -eq $user -and
            $_.ActiveDirectoryRights -match "ReadProperty" -and
            ($_.ObjectType -eq "00000000-0000-0000-0000-000000000000" -or $_.ObjectType -eq $schema.ObjectGuid)
          }
          if ($access) {
            Write-Output '{"lockedout_permission": "granted", "user": "{{ ansible_user }}", "ou": "{{ user_ou }}"}'
          } else {
            Write-Output '{"lockedout_permission": "denied", "user": "{{ ansible_user }}", "ou": "{{ user_ou }}", "message": "Usuário não tem permissão para atributo LockedOut"}'
          }
        } catch {
          Write-Output '{"lockedout_permission": "error", "user": "{{ ansible_user }}", "ou": "{{ user_ou }}", "message": "Erro ao verificar permissão LockedOut: $($_.Exception.Message)"}'
        }
      register: lockedout_permission_check
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)
        - ad_module_check.stdout is defined
        - ad_module_check.stdout | regex_search('status\": \"available')
        - ou_check.stdout is defined
        - ou_check.stdout | regex_search('status\": \"valid')
        - permission_check.stdout is defined
        - permission_check.stdout | regex_search('permissions\": \"granted')

    - name: Logar status da permissão LockedOut
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Status da permissão LockedOut={{ lockedout_permission_check.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: lockedout_permission_check.stdout is defined

    - name: Testar acesso à OU listando contas
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $users = Get-ADUser -Filter * -SearchBase "{{ user_ou }}" -Properties SamAccountName -ResultSetSize 5 -ErrorAction Stop |
            Select-Object SamAccountName
          if ($users) {
            $users | ConvertTo-Json -Depth 3
          } else {
            Write-Output '{"users": [], "message": "Nenhuma conta encontrada na OU"}'
          }
        } catch {
          Write-Output '{"users": [], "message": "Erro ao listar contas na OU: $($_.Exception.Message)"}'
        }
      register: test_users
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)
        - ad_module_check.stdout is defined
        - ad_module_check.stdout | regex_search('status\": \"available')
        - ou_check.stdout is defined
        - ou_check.stdout | regex_search('status\": \"valid')
        - permission_check.stdout is defined
        - permission_check.stdout | regex_search('permissions\": \"granted')

    - name: Logar resultado do teste de acesso à OU
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Teste de acesso à OU={{ test_users.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: test_users.stdout is defined

    - name: Contar contas bloqueadas
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $lockedUsers = Get-ADUser -Filter {LockedOut -eq $true} -SearchBase "{{ user_ou }}" -Properties SamAccountName -ErrorAction Stop
          Write-Output '{"count": ' + $lockedUsers.Count + ', "message": "Contagem de contas bloqueadas"}'
        } catch {
          Write-Output '{"count": 0, "message": "Erro ao contar contas bloqueadas: $($_.Exception.Message)"}'
        }
      register: locked_count
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)
        - ad_module_check.stdout is defined
        - ad_module_check.stdout | regex_search('status\": \"available')
        - ou_check.stdout is defined
        - ou_check.stdout | regex_search('status\": \"valid')
        - permission_check.stdout is defined
        - permission_check.stdout | regex_search('permissions\": \"granted')
        - lockedout_permission_check.stdout is defined
        - lockedout_permission_check.stdout | regex_search('lockedout_permission\": \"granted')

    - name: Logar contagem de contas bloqueadas
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Contagem de contas bloqueadas={{ locked_count.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: locked_count.stdout is defined

    - name: Listar contas bloqueadas
      win_shell: |
        try {
          Import-Module ActiveDirectory
          $lockedUsers = Get-ADUser -Filter {LockedOut -eq $true} -SearchBase "{{ user_ou }}" -Properties LockoutTime,SamAccountName -ResultSetSize {{ max_accounts }} -ErrorAction Stop |
            Select-Object Name,SamAccountName,@{Name='LockoutTime';Expression={if ($_.LockoutTime) { [DateTime]::FromFileTime($_.LockoutTime) } else { 'Desconhecido' }}},DistinguishedName
          if ($lockedUsers) {
            Write-Output ($lockedUsers | ConvertTo-Json -Depth 3)
          } else {
            Write-Output '{"locked_users": [], "message": "Nenhuma conta bloqueada encontrada"}'
          }
        } catch {
          Write-Output '{"locked_users": [], "message": "Erro ao listar contas bloqueadas: $($_.Exception.Message)", "error_details": "' + ($_.Exception | ConvertTo-Json -Depth 3) + '"}'
        }
      register: locked_accounts
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)
        - ad_module_check.stdout is defined
        - ad_module_check.stdout | regex_search('status\": \"available')
        - ou_check.stdout is defined
        - ou_check.stdout | regex_search('status\": \"valid')
        - permission_check.stdout is defined
        - permission_check.stdout | regex_search('permissions\": \"granted')
        - lockedout_permission_check.stdout is defined
        - lockedout_permission_check.stdout | regex_search('lockedout_permission\": \"granted')

    - name: Exibir contas bloqueadas
      ansible.builtin.debug:
        msg: "{{ locked_accounts.stdout }}"
        verbosity: 2
      when: locked_accounts.stdout is defined and locked_accounts.stdout | length > 0

    - name: Registrar contas bloqueadas
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Contas bloqueadas={{ locked_accounts.stdout | default('Nenhum dado') }}"
        create: true
      delegate_to: localhost
      when: locked_accounts.stdout is defined

    - name: Coletar eventos de logon malsucedidos (eventID 4625) para contas bloqueadas
      win_shell: |
        try {
          $lockedJson = '{{ locked_accounts.stdout | default('{"locked_users": [], "message": "Nenhuma conta bloqueada"}') }}'
          $lockedUsers = ($lockedJson | ConvertFrom-Json).locked_users
          if ($lockedUsers -and $lockedUsers.Count -gt 0) {
            $userNames = $lockedUsers | ForEach-Object { $_.SamAccountName }
            $startTime = (Get-Date).AddDays(-{{ days_back }})
            $endTime = Get-Date
            $events = Get-WinEvent -FilterHashtable @{
              LogName = 'Security'
              ID = 4625
              StartTime = $startTime
              EndTime = $endTime
            } -ErrorAction SilentlyContinue | Where-Object {
              $_.Properties[5].Value -in $userNames
            }
            if ($events) {
              $events | Select-Object TimeCreated, @{
                Name='AccountName'; Expression={$_.Properties[5].Value}
              }, @{
                Name='FailureReason'; Expression={$_.Properties[19].Value}
              }, @{
                Name='SourceIPAddress'; Expression={$_.Properties[18].Value}
              }, @{
                Name='ProcessName'; Expression={$_.Properties[14].Value}
              }, @{
                Name='WorkstationName'; Expression={$_.Properties[10].Value}
              } | ConvertTo-Json -Depth 3
            } else {
              Write-Output '{"events": [], "message": "Nenhum evento 4625 encontrado para contas bloqueadas"}'
            }
          } else {
            Write-Output '{"events": [], "message": "Nenhuma conta bloqueada para verificar eventos"}'
          }
        } catch {
          Write-Output '{"events": [], "message": "Erro ao coletar eventos: $($_.Exception.Message)"}'
        }
      register: logon_failures
      ignore_errors: true
      when:
        - not winrm_connect.failed | default(false)
        - not auth_check.unreachable | default(false)
        - locked_accounts.stdout is defined
        - locked_accounts.stdout | regex_search('locked_users\": \[{')

    - name: Exibir eventos de logon malsucedidos
      ansible.builtin.debug:
        msg: "{{ logon_failures.stdout }}"
        verbosity: 2
      when: logon_failures.stdout is defined and logon_failures.stdout | length > 0

    - name: Registrar eventos de logon malsucedidos
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Logon malsucedidos={{ logon_failures.stdout | default('Nenhum evento') }}"
        create: true
      delegate_to: localhost
      when: logon_failures.stdout is defined

    - name: Resumo da verificação
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Resumo - Contas bloqueadas={{ locked_accounts.stdout | default('Nenhum') }}, Logon malsucedidos={{ logon_failures.stdout | default('Nenhum') }}"
        create: true
      delegate_to: localhost
      when:
        - locked_accounts.stdout is defined
        - logon_failures.stdout is defined
