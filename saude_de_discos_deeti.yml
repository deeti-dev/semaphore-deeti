---
- name: Verificar a saúde dos discos em máquinas Windows
  hosts: deeti
  gather_facts: yes
  ignore_unreachable: yes
  vars:
    free_space_threshold: 10  # Porcentagem mínima de espaço livre (alertar se < 10%)
    log_path: /tmp/disk_health_report.log  # Caminho para o log no controlador
    winrm_port: 5985  # Porta padrão do WinRM
  tasks:
    - name: Verificar conectividade na porta WinRM
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: "{{ winrm_port }}"
        state: started
        timeout: 30
        connect_timeout: 10
      register: winrm_connect
      ignore_errors: yes
      ignore_unreachable: yes
      delegate_to: localhost

    - name: Logar erro de conectividade
      debug:
        msg: "Erro de conectividade na porta {{ winrm_port }} em {{ inventory_hostname }}: {{ winrm_connect.msg | default('Falha ao conectar') }}"
      when: winrm_connect.failed is defined and winrm_connect.failed

    - name: Registrar hosts inacessíveis
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Erro de conectividade - {{ winrm_connect.msg | default('Falha ao conectar') }}"
        create: yes
      delegate_to: localhost
      when: winrm_connect.failed is defined and winrm_connect.failed

    - name: Opcional - Verificar WinRM com Test-WSMan
      ansible.builtin.shell: |
        powershell -Command "Test-WSMan -ComputerName {{ inventory_hostname }} -Port {{ winrm_port }} -ErrorAction Stop | ConvertTo-Json"
      register: test_wsman
      ignore_errors: yes
      delegate_to: localhost
      when: winrm_connect.failed is not defined or not winrm_connect.failed

    - name: Logar resultado do Test-WSMan
      debug:
        msg: "Resultado do Test-WSMan em {{ inventory_hostname }}: {{ test_wsman.stdout | default('N/A') }}"
      when: test_wsman.stdout is defined and test_wsman.stdout != ""

    - name: Verificar status do serviço WinRM
      win_shell: Get-Service -Name WinRM | Select-Object -Property Name, Status, StartType | ConvertTo-Json
      register: winrm_service
      ignore_errors: yes
      timeout: 60
      when: winrm_connect.failed is not defined or not winrm_connect.failed

    - name: Logar status do serviço WinRM
      debug:
        msg: "Status do serviço WinRM em {{ inventory_hostname }}: {{ (winrm_service.stdout | from_json).Status | default('Desconhecido') }}"
      when: winrm_service.stdout is defined and winrm_service.stdout != ""

    - name: Coletar informações de volumes
      win_shell: |
        $volumes = Get-Volume | Where-Object { $_.DriveLetter -and $_.FileSystemType -eq 'NTFS' }
        $output = @()
        foreach ($vol in $volumes) {
          $freePercent = [math]::Round(($vol.SizeRemaining / $vol.Size) * 100, 2)
          $output += [PSCustomObject]@{
            DriveLetter = $vol.DriveLetter
            SizeGB = [math]::Round($vol.Size / 1GB, 2)
            FreeSpaceGB = [math]::Round($vol.SizeRemaining / 1GB, 2)
            FreePercent = $freePercent
            HealthStatus = $vol.HealthStatus
            Alert = if ($freePercent -lt {{ free_space_threshold }}) { "Espaço livre crítico (<{{ free_space_threshold }}%)" } else { "OK" }
          }
        }
        $output | ConvertTo-Json
      register: volume_info
      ignore_errors: yes
      timeout: 60
      when: winrm_connect.failed is not defined or not winrm_connect.failed

    - name: Debugar informações de volumes
      debug:
        msg: "Volume {{ item.DriveLetter }} em {{ inventory_hostname }}: Tamanho={{ item.SizeGB }}GB, Livre={{ item.FreeSpaceGB }}GB ({{ item.FreePercent }}%), Status={{ item.HealthStatus }}, Alerta={{ item.Alert }}"
      loop: "{{ (volume_info.stdout | from_json) | default([]) }}"
      when: volume_info.stdout is defined and volume_info.stdout != ""

    - name: Coletar status SMART dos discos físicos
      win_shell: |
        $disks = Get-PhysicalDisk
        $output = @()
        foreach ($disk in $disks) {
          $output += [PSCustomObject]@{
            DeviceId = $disk.DeviceId
            Model = $disk.Model
            OperationalStatus = $disk.OperationalStatus
            HealthStatus = $disk.HealthStatus
            Alert = if ($disk.HealthStatus -ne 'Healthy') { "Problema detectado: $($disk.HealthStatus)" } else { "OK" }
          }
        }
        $output | ConvertTo-Json
      register: smart_info
      ignore_errors: yes
      timeout: 60
      when: winrm_connect.failed is not defined or not winrm_connect.failed

    - name: Debugar status SMART
      debug:
        msg: "Disco {{ item.DeviceId }} ({{ item.Model }}) em {{ inventory_hostname }}: Status Operacional={{ item.OperationalStatus }}, Status SMART={{ item.HealthStatus }}, Alerta={{ item.Alert }}"
      loop: "{{ (smart_info.stdout | from_json) | default([]) }}"
      when: smart_info.stdout is defined and smart_info.stdout != ""

    - name: Verificar erros de disco no log de eventos
      win_shell: |
        $events = Get-WinEvent -LogName "System" -MaxEvents 1000 -ErrorAction SilentlyContinue | Where-Object {
          $_.ProviderName -eq "Disk" -and $_.LevelDisplayName -in @("Error", "Critical")
        }
        $output = @()
        foreach ($event in $events) {
          $output += [PSCustomObject]@{
            TimeCreated = $event.TimeCreated
            EventId = $event.Id
            Message = $event.Message
            Level = $event.LevelDisplayName
          }
        }
        $output | ConvertTo-Json
      register: disk_errors
      ignore_errors: yes
      timeout: 60
      when: winrm_connect.failed is not defined or not winrm_connect.failed

    - name: Debugar erros de disco
      debug:
        msg: "Erro de disco em {{ inventory_hostname }} às {{ item.TimeCreated }}: ID={{ item.EventId }}, Nível={{ item.Level }}, Mensagem={{ item.Message }}"
      loop: "{{ (disk_errors.stdout | from_json) | default([]) }}"
      when: disk_errors.stdout is defined and disk_errors.stdout != ""

    - name: Coletar métricas de desempenho do disco
      win_shell: |
        $diskPerf = Get-CimInstance Win32_PerfFormattedData_PerfDisk_PhysicalDisk | Where-Object { $_.Name -ne "_Total" }
        $output = @()
        foreach ($disk in $diskPerf) {
          $output += [PSCustomObject]@{
            Name = $disk.Name
            AvgDiskSecPerRead = [math]::Round($disk.AvgDiskSecPerRead / 1000, 3)  # ms
            AvgDiskSecPerWrite = [math]::Round($disk.AvgDiskSecPerWrite / 1000, 3)  # ms
            DiskReadErrors = $disk.DiskReadErrors
            DiskWriteErrors = $disk.DiskWriteErrors
            Alert = if ($disk.AvgDiskSecPerRead -gt 25 -or $disk.AvgDiskSecPerWrite -gt 25) { "Latência alta detectada" } elseif ($disk.DiskReadErrors -gt 0 -or $disk.DiskWriteErrors -gt 0) { "Erros de leitura/escrita detectados" } else { "OK" }
          }
        }
        $output | ConvertTo-Json
      register: disk_perf
      ignore_errors: yes
      timeout: 60
      when: winrm_connect.failed is not defined or not winrm_connect.failed

    - name: Debugar métricas de desempenho
      debug:
        msg: "Disco {{ item.Name }} em {{ inventory_hostname }}: Latência Leitura={{ item.AvgDiskSecPerRead }}ms, Latência Escrita={{ item.AvgDiskSecPerWrite }}ms, Erros Leitura={{ item.DiskReadErrors }}, Erros Escrita={{ item.DiskWriteErrors }}, Alerta={{ item.Alert }}"
      loop: "{{ (disk_perf.stdout | from_json) | default([]) }}"
      when: disk_perf.stdout is defined and disk_perf.stdout != ""

    - name: Resumir alertas críticos
      debug:
        msg: |
          Resumo de alertas em {{ inventory_hostname }}:
          - Volumes: {{ (volume_info.stdout | from_json | select('Alert', 'ne', 'OK') | list | length) }} alertas
          - SMART: {{ (smart_info.stdout | from_json | select('Alert', 'ne', 'OK') | list | length) }} alertas
          - Erros de Disco: {{ (disk_errors.stdout | from_json | list | length) }} erros
          - Desempenho: {{ (disk_perf.stdout | from_json | select('Alert', 'ne', 'OK') | list | length) }} alertas
      when:
        - volume_info.stdout is defined or smart_info.stdout is defined or disk_errors.stdout is defined or disk_perf.stdout is defined

    - name: Registrar resultados no log
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Volumes={{ (volume_info.stdout | from_json | to_json) | default('N/A') }}; SMART={{ (smart_info.stdout | from_json | to_json) | default('N/A') }}; Erros={{ (disk_errors.stdout | from_json | to_json) | default('N/A') }}; Desempenho={{ (disk_perf.stdout | from_json | to_json) | default('N/A') }}"
        create: yes
      delegate_to: localhost
      when:
        - volume_info.stdout is defined or smart_info.stdout is defined or disk_errors.stdout is defined or disk_perf.stdout is defined
