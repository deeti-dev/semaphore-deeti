---
- name: Verificar e instalar atualizações nos Servidores WS2k19
  hosts: ws2k19
  gather_facts: no
  ignore_unreachable: yes
  vars:
    log_path: /tmp/update_check_report.log
  tasks:
    - name: Verificar conectividade na porta WinRM
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: 5985
        state: started
        timeout: 60
        connect_timeout: 60
      register: winrm_connect
      ignore_errors: yes
      ignore_unreachable: yes
      delegate_to: localhost

    - name: Logar erro de conectividade
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Erro de conectividade - {{ winrm_connect.msg | default('Falha ao conectar') }}"
        create: yes
      delegate_to: localhost
      when: winrm_connect.failed is defined and winrm_connect.failed

    - name: Verificar atualizações pendentes
      win_updates:
        state: searched  # Primeiro, apenas verifica as atualizações
        category_names:
          - SecurityUpdates
          - UpdateRollups
      register: update_result
      ignore_errors: yes
      when: winrm_connect.failed is not defined or not winrm_connect.failed

    - name: Exibir as atualizações encontradas
      debug:
        var: update_result.updates
      when: update_result.updates is defined and update_result.updates | length > 0

    - name: Instalar atualizações pendentes
      win_updates:
        state: installed  # Instala as atualizações
        category_names:
          - SecurityUpdates
          - UpdateRollups
      register: install_result
      ignore_errors: yes
      when:
        - winrm_connect.failed is not defined or not winrm_connect.failed
        - update_result.found_update_count is defined and update_result.found_update_count > 0

    - name: Verificar necessidade de reinicialização
      debug:
        msg: "{{ inventory_hostname }} precisa reiniciar: {{ install_result.reboot_required | default(false) }}"
      when:
        - install_result is defined
        - install_result.reboot_required is defined

    - name: Registrar necessidade de reinicialização no log
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Reboot necessário={{ install_result.reboot_required | default(false) }}"
        create: yes
      delegate_to: localhost
      when:
        - install_result is defined
        - install_result.reboot_required is defined and install_result.reboot_required

    - name: Reiniciar o servidor se necessário
      win_reboot:
        reboot_timeout: 600  # Tempo máximo para reinicialização (10 minutos)
      when:
        - install_result is defined
        - install_result.reboot_required is defined and install_result.reboot_required
      ignore_errors: yes

    - name: Registrar resultados no log
      ansible.builtin.lineinfile:
        path: "{{ log_path }}"
        line: "{{ inventory_hostname }}: Atualizações encontradas={{ update_result.found_update_count | default(0) }}, Atualizações instaladas={{ install_result.installed_update_count | default(0) }}, Reboot necessário={{ install_result.reboot_required | default(false) }}, Detalhes={{ update_result.updates | default({}) | to_json }}"
        create: yes
      delegate_to: localhost
      when: update_result is defined or install_result is defined
