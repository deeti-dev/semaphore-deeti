---
- name: Limpar arquivos temporários no %temp% de todos os usuários e obter o tamanho
  hosts: deeti
  gather_facts: yes
  ignore_unreachable: yes
  tasks:
    - name: Obter lista de diretórios de usuários em C:\Users
      win_shell: |
        $excludedUsers = @('All Users', 'Default', 'Default User', 'KINagSvc', 'Public')
        $userDirs = Get-ChildItem -Path 'C:\Users' -Directory -ErrorAction SilentlyContinue | Where-Object { $excludedUsers -notcontains $_.Name } | Select-Object -ExpandProperty FullName
        if ($userDirs) { $userDirs -join ',' } else { Write-Output "Nenhum usuário válido encontrado" }
      register: user_directories
      ignore_errors: yes

    - name: Debugar lista de diretórios de usuários
      debug:
        msg: "Diretórios de usuários encontrados: {{ user_directories.stdout | replace('\r\n', '') }}"
      when: user_directories.rc == 0

    - name: Calcular o tamanho total das pastas %temp% em GB
      win_shell: |
        $userDirs = "{{ user_directories.stdout | replace('\r\n', '') }}".Split(',', [StringSplitOptions]::RemoveEmptyEntries)
        $totalSize = 0
        foreach ($dir in $userDirs) {
          $tempDir = Join-Path -Path $dir.Trim() -ChildPath 'AppData\Local\Temp'
          if (Test-Path $tempDir) {
            $size = (Get-ChildItem -Path $tempDir -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum -ErrorAction SilentlyContinue).Sum
            if ($size -ne $null) { $totalSize += $size }
          }
        }
        if ($totalSize -eq 0) { Write-Output "0" } else { [math]::Round($totalSize / 1GB, 2) }
      register: temp_size_gb
      ignore_errors: yes
      when: user_directories.stdout != "Nenhum usuário válido encontrado"

    - name: Exibir o tamanho total das pastas %temp%
      debug:
        msg: "Tamanho total das pastas %temp%: {{ temp_size_gb.stdout | trim }} GB"
      when: temp_size_gb.rc == 0

    - name: Deletar arquivos nas pastas %temp% de todos os usuários
      win_shell: |
        $userDirs = "{{ user_directories.stdout | replace('\r\n', '') }}".Split(',', [StringSplitOptions]::RemoveEmptyEntries)
        $results = @()
        foreach ($dir in $userDirs) {
          $tempDir = Join-Path -Path $dir.Trim() -ChildPath 'AppData\Local\Temp'
          if (Test-Path $tempDir) {
            try {
              Get-ChildItem -Path $tempDir -Recurse -ErrorAction Stop | Remove-Item -Force -Recurse -ErrorAction Stop
              $results += "Limpeza bem-sucedida em $tempDir"
            } catch {
              $results += "Erro ao limpar $tempDir : $_"
            }
          } else {
            $results += "Pasta não encontrada: $tempDir"
          }
        }
        $results -join ';'
      register: temp_cleanup
      ignore_errors: yes
      when: user_directories.stdout != "Nenhum usuário válido encontrado"

    - name: Debugar resultados da limpeza
      debug:
        msg: "Resultados da limpeza: {{ temp_cleanup.stdout }}"
      when: temp_cleanup.rc == 0

    - name: Listar arquivos remanescentes em %temp% após limpeza
      win_shell: |
        $userDirs = "{{ user_directories.stdout | replace('\r\n', '') }}".Split(',', [StringSplitOptions]::RemoveEmptyEntries)
        $results = @()
        foreach ($dir in $userDirs) {
          $tempDir = Join-Path -Path $dir.Trim() -ChildPath 'AppData\Local\Temp'
          if (Test-Path $tempDir) {
            $files = Get-ChildItem -Path $tempDir -Recurse -ErrorAction SilentlyContinue | Select-Object -ExpandProperty FullName
            if ($files) {
              $results += "Arquivos remanescentes em $tempDir : $($files -join ',')"
            } else {
              $results += "Nenhum arquivo remanescente em $tempDir"
            }
          }
        }
        $results -join ';'
      register: remaining_files
      ignore_errors: yes
      when: user_directories.stdout != "Nenhum usuário válido encontrado"

    - name: Debugar arquivos remanescentes
      debug:
        msg: "Arquivos remanescentes: {{ remaining_files.stdout }}"
      when: remaining_files.rc == 0

    - name: Calcular o tamanho total das pastas %temp% após limpeza
      win_shell: |
        $userDirs = "{{ user_directories.stdout | replace('\r\n', '') }}".Split(',', [StringSplitOptions]::RemoveEmptyEntries)
        $totalSize = 0
        foreach ($dir in $userDirs) {
          $tempDir = Join-Path -Path $dir.Trim() -ChildPath 'AppData\Local\Temp'
          if (Test-Path $tempDir) {
            $size = (Get-ChildItem -Path $tempDir -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum -ErrorAction SilentlyContinue).Sum
            if ($size -ne $null) { $totalSize += $size }
          }
        }
        if ($totalSize -eq 0) { Write-Output "0" } else { [math]::Round($totalSize / 1GB, 2) }
      register: temp_size_after_cleanup
      ignore_errors: yes
      when: user_directories.stdout != "Nenhum usuário válido encontrado"

    - name: Informar resultado da limpeza
      debug:
        msg: "Limpeza das pastas %temp% concluída. Tamanho antes: {{ temp_size_gb.stdout | trim }} GB, Tamanho depois: {{ temp_size_after_cleanup.stdout | trim }} GB"
      when: temp_cleanup.rc == 0 and temp_size_after_cleanup.rc == 0
